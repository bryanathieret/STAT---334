---
title: "Section 2: Core Viz Concepts"
format:
  html:
    embed-resources: true
    echo: false
    warning: false
    message: false
documentclass: article
author: "Bryana A. S. Thieret"
mainfont: "Cambria"
monofont: "Cambria"
---

```{r, output = FALSE, warning=FALSE, message=FALSE}
library(palmerpenguins)
library(tidyverse)
theme_set(theme_classic())
```


_-----------------------------------------------------------------------------------------_   

## 2.1: Data Visualization Concepts (Class Prep)  
Read Sections 1.1 - 1.2 of Kearen Healy’s Data Visualization: A Practical Introduction. As you read, answer the following questions in just 1 to 2 sentences in a Quarto document.  

1. Using either Anscombe’s quartet or the income/voter turnout graph as an example, explain why it’s valuable to look at data graphically instead of examining data only with summary statistics.  
* Summary statistics can only tell a person so much about the data and have many limitations especially when considering relationships between variables which cannot be properly evaluated using just summary statistics (e.g., is the relationship linear or quadratic, is there clustering, are there outliers). Honestly, summary statistics should be used last after visual analysis of the data.  

2. Take a look at the bar plot in Figure 1.4. Give a couple of reasons for why the chart has “bad taste.”  
* The bars are 3D just to be 3D rather than showing another aspect of the data through different depths/sizes of the bars. The bars also have the same print/texture which could have been utilized to group in some different way. Lastly, I am just going to say the 3D bars have a shadow which is completely unnecessary and do not understand the real point of.  

3. Why might you not always want to maximize the data-to-ink ratio when making charts?  
* Just because it is simpler does not make it easier for an audience to interpret.   

4. What do the authors mean when they say that “relative comparisons need a stable baseline” and how does that affect your ability to interpret the coloured stacked bar plot in Figure 1.11?  
* You can't compare the categories to one another when they are stacked the way they are. It makes it difficult to compare the differences between "Type".  

5. What are two key takeaways from Sections 1.1 and 1.2?  
(a) The way a person decides to display data can be deceiving, misleading, and/or cherry picked to prove/show a specific point.  
(b) Displaying data in the most simple way could be helpful (i.e., you don't have all this extra stuff going on which can be confusing), but could also make the graphic less interpretable for the audience.  

6. What is one question that you have about the reading?  
* There are only so many variables you can show in a graph so how do you decide how to choose which ones to show in a non-biased or misleading way if you are trying to make a point?  



_-----------------------------------------------------------------------------------------_   

## 2.2: Grammar of Graphics   

* We begin with a review of the ggplot2 package. However, we will now consider the package from a more conceptual perspective through the idea of a **Grammar of Graphics** (i.e., “a tool that enables us to concisely describe the components of a graphic. Such a grammar allows us to move beyond named graphics (e.g., the ”scatterplot”) and gain insight into the deep structure that underlies statistical graphics.”).  

* In STAT 234 we used the ggplot2 package, which implements a grammar of graphics in R. There are 7 parameters in a grammar of graphics:  
  * `<DATA>`: the data set  
  * `<MAPPINGS>`: an aesthetic mapping  
  * `<GEOM_FUNCTION>`: a geometrical object  
  * `<STAT>`: a statistical transformation  
  * `<POSITION>`: a position adjustment  
  * `<FACET_FUNCTION>`: subplots  
  * `<COORDINATE_FUNCTION`: a coordinate system  

### 2.2.1: `<DATA>`. `<MAPPINGS>`, and `<GEOM_FUNCTION>`  

* `<DATA>` is a required parameter and is simple the data set that you will use for the plot.  
* `<MAPPINGS>` are what is specified in the `aes()` aesthetics function. They map variables in your data set to plot characteristics. Common mappings are,  
  * `x` position  
  * `y` position  
  * `colour`  
  * `size`  
  * `shape`  
  * `group`  
  * `fill`  
* `<GEOM_FUNCTION>` is the geometric object used to represent the data. Common examples include,  
  * `geom_histogram()` and `geom_freqpoly()` for a single quantitative variable  
  * `geom_bar()` and `geom_col()` for a single categorical variable  
  * `geom_point()`, `geom_line()`, and `geom_smooth()` for two quantitative variables  
  * `geom_boxplot()` and `geom_violin()` for a categorical and a quantitative variable  
  * `geom_bar()`, `geom_tile()`, and `geom_bin_2d()` for two categorical variables  
  * Other geoms, like geom_text() and geom_label() allow you to annotate a plot. And there are many others: geom_hexbin(), geom_area(), and geom_hline() are a few of the more useful ones.  

### 2.2.2: `<FACET>`  
* The other parameter that we commonly used in Data Science is the `<FACET>` parameter, often through the `facet_wrap()` function or the `facet_grid()` function. As a reminder, faceting is useful if you would like to make subplots for different subsets of the data.  

### 2.2.3: `<STAT>`, `<POSITION>`, and `<COORDINATE_FUNCTION>`  
* The remaining 3 parameters in the Grammar of Graphics are `<STAT>`, `<POSITION>`, and `<COORDINATE_FUNCTION>`. Often these do not need to be specified at all because the ggplot2 package provides useful defaults for them. In most situations, these defaults do not need to e changed.  

* `<STAT>`:  
  * Each `geom` has a default statistical transformation, `<STAT>`, given in the help file for that `<GEOM>`. In many cases, the transformation is the "identity" (meaning there is no real transformation at all). For `geom_bar()`, the default `<STAT>` is count: a bar plot is made by counting up the number of each level of a categorical variable. Behind the scenes, using `geom_bar()` creates a new data frame that counts the number of observations for each unique level of `x` and plots that.   

```{r}
penguins |> group_by(species) |> summarise(count = n()) |>
  ggplot(aes(x = species)) + geom_bar(aes(x = species, y = count), stat = "identity") # same as if I used geom_col

```


* `<POSITION>`:  
  * A common way in which `<POSITION>` is changed is to create a side-by-side barplot instead of a stacked barplot.  
  * The default position in `geom_bar()` is "stack" for an observations that occupy the same `x`. Another option for `<POSITION>` is "dodge".  
  * Another example of a `<POSITION>` adjustment is using "jitter" instead of "identity" in `geom_point()` to add a little noise to overlapping data points.

```{r stacked vs. side-by-side bars}
ggplot(data = penguins, aes(x = species, fill = sex)) +
  geom_bar(position = "stack") + ## don't need "stack" because it's default
  scale_fill_viridis_d()

ggplot(data = penguins, aes(x = species, fill = sex)) +
  geom_bar(position = position_dodge(0.9)) + 
  scale_fill_viridis_d()

penguins_na = penguins |> na.omit() # gets rid of NAs 

ggplot(data = penguins_na, aes(x = species, fill = sex)) +
  geom_bar(position = position_dodge(0.9)) + 
  scale_fill_viridis_d()

```


* `<COORDINATE_FUNCTION>`:  
  * Finally, most plots use a standard Cartesian `<COORDINATE_FUNCTION>`.  
  * This rarely needs to be changed, but we will see `coord_quickmap()` used to fix the aspect ratio of spatial maps.  
  * Another `<COORDINATE_FUNCTION>` is `coord_polar()`.  
  * I can’t think of a single time I have ever used `coord_polar()` but a more useful coordinate function is `coord_flip()`, which you likely used in STAT/DATA 234 to flip the x and y coordinates of a Cartesian coordinate system.  
  
```{r}
ggplot(data = penguins, aes(x = species)) +
  geom_bar() +
  coord_polar()

ggplot(data = penguins, aes(x = species)) + 
  geom_bar() +
  coord_flip() # flips coordinate 
```
  
  
**Exercise 1**: The following scatterplot explicitly specifies 3 of the 7 grammar of graphics parameters. The other 4 parameters are given default values: `<FACET>` is `facet_null()` (which is added as another layer to the plot), `<STAT>` is "identity" (an argument of `geom_point()`), `<POSITION>` is "identity" (an argument of `geom_point()`), and `<COORDINATE_FUNCTION>` is `coord_cartesian()` (which is added as another layer to the plot). Modify the plot so that it explicitly uses the default values for the other 4 parameters.  

```{r}
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(stat = "identity", position = "identity") +
  facet_null() +
  coord_cartesian()
```


_-----------------------------------------------------------------------------------------_   

## 2.3: Your Turn  


**Exercise 1:** Make another plot of bill_length_mm with a different geom that is used for a single quantitative variable.  

```{r}
ggplot(data = penguins, aes(x = bill_length_mm)) +
  geom_histogram(color = "hotpink1", fill = "pink")
```


Exercise 2. Create a plot of a quantitative and a categorical variable in the penguins data set.

```{r}
penguins |> ggplot(aes(x = year, y = body_mass_g)) + 
  geom_jitter(width = 0.2, shape = 21, size = 3)
```



Exercise 3. Modify the frequency plot made with geom_freqpoly() to use colour in two different ways:

change the colour of the line to any colour that R knows. A list of some colours can be found at this link.

add a colour aesthetic to make three different frequency lines, one for each species of penguin.

```{r}
ggplot(data = penguins, aes(x = bill_length_mm, col = species)) +
  geom_freqpoly(linewidth = 1.5) +
  scale_colour_brewer(palette = "Dark2")
```


Exercise 4. Recall that aes() aesthetics specified within the ggplot() function directly are called global aesthetics because every other <GEOM> will use them (unless specifically overridden) while aes() specified within a particular <GEOM> are called local aesthetics because only that particular <GEOM> will use them.

Modify the scatterplot and smoother so that 
the points are coloured by species, but there is only one smoother instead of three.

there are three different coloured smoothers (one for each species) but the points are all the same colour.

```{r}
ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, col = species)) +
  geom_point() +
  geom_smooth(se = FALSE) 
```


Exercise 5. Construct another graph that explicitly uses all 7 grammar of graphics parameters (you may set some of these parameters to be the default values, but you should do so explicitly).

```{r}
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, col = species)) +
  geom_point(stat = "identity", position = "identity") +
  facet_null() +
  coord_cartesian() + 
  scale_color_brewer(palette = "Dark2")
```


Exercise 6. Create two different graphs that differ only by 1 of the 7 grammar of graphics parameters. Then, show your two graphs (but not your code) to a partner and see if they can identify which graphics parameter has been modified.

```{r}
ggplot(data = penguins_na, aes(y = bill_length_mm, x = species, fill = sex)) +
  geom_col(position = position_dodge(0.9)) +
  scale_fill_brewer(palette = "Dark2")

ggplot(data = penguins_na, aes(y = bill_length_mm, x = species, fill = sex)) +
  geom_col(position = position_dodge(0.9)) +
  scale_fill_brewer(palette = "Dark2") + 
  coord_flip() 
```







